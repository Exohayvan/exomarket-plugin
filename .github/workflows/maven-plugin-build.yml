name: Build and Release Minecraft Plugin

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history to get commit logs

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven

      - name: Build with Maven
        run: mvn clean package

      - name: Get built JAR file name
        id: jar_info
        run: |
          # Extract the built JAR file's name
          jar_file=$(ls target/*.jar | xargs -n 1 basename)
          # Extract tag name (without .jar extension)
          tag_name="${jar_file%.jar}"
          echo "jar_file=$jar_file" >> $GITHUB_OUTPUT
          echo "tag_name=$tag_name" >> $GITHUB_OUTPUT

      - name: Check if release exists
        id: check_release
        run: |
          tag_name="${{ steps.jar_info.outputs.tag_name }}"
          echo "Checking if release $tag_name exists"
          response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/$tag_name)
          if echo "$response" | grep -q "Not Found"; then
            echo "release_exists=false" >> $GITHUB_OUTPUT
          else
            echo "release_exists=true" >> $GITHUB_OUTPUT
          fi

      - name: Get last release tag
        id: last_release
        run: |
          # Get the latest tag
          last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$last_tag" ]; then
            echo "No previous tags found"
            last_tag=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "last_tag=$last_tag" >> $GITHUB_OUTPUT

      - name: Get commits since last release
        id: get_commits
        run: |
          if [ "${{ steps.check_release.outputs.release_exists }}" == "true" ]; then
            echo "No new release needed"
            echo "commit_log=" >> $GITHUB_OUTPUT
          else
            last_tag="${{ steps.last_release.outputs.last_tag }}"
            echo "Getting commits since $last_tag"
            commit_log=$(git log $last_tag..HEAD --pretty=format:"- %s")
            # Handle multi-line output
            echo "commit_log<<EOF" >> $GITHUB_OUTPUT
            echo "$commit_log" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Create release
        if: steps.check_release.outputs.release_exists == 'false'
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.jar_info.outputs.tag_name }}
          release_name: ${{ steps.jar_info.outputs.tag_name }}
          body: ${{ steps.get_commits.outputs.commit_log }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset
        if: steps.check_release.outputs.release_exists == 'false'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/${{ steps.jar_info.outputs.jar_file }}
          asset_name: ${{ steps.jar_info.outputs.jar_file }}
          asset_content_type: application/java-archive
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build completed
        run: echo "Build completed successfully."
